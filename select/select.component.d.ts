import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges } from '@angular/core';
import { NgxFillMode, NgxRounded, NgxSize } from './typings';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class SelectComponent implements AfterViewInit, ControlValueAccessor, OnChanges {
    elementRef: ElementRef;
    private cdr;
    ngControl: NgControl;
    ngxSize: NgxSize;
    ngxRounded: NgxRounded;
    ngxFillMode: NgxFillMode;
    label: string;
    placeholder: string;
    autocomplete: boolean;
    selectRef: ElementRef;
    containerRef: ElementRef;
    labelRef: ElementRef;
    inputRef: ElementRef;
    arrowRef: ElementRef;
    optContRef: ElementRef;
    readonly containerRef$: ReplaySubject<ElementRef<any>>;
    readonly inputRef$: ReplaySubject<ElementRef<any>>;
    onChange: any;
    onTouched: any;
    value: any;
    valStatus: boolean;
    disabled: boolean;
    inputFocus: boolean;
    isOpenDropdown: boolean;
    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, ngControl: NgControl);
    ngAfterViewInit(): void;
    openDropdown(isOpenDropdown: boolean): void;
    clickout(event: any): void;
    ngOnChanges(): void;
    initialize(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    moveLabel(): void;
    moveArrow(): void;
    onInputChange(event: Event): void;
    buildBorderOutlined(): void;
    drawLineTopBorder(): void;
    validate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectComponent, [null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectComponent, "ngx-select", never, { "ngxSize": { "alias": "ngxSize"; "required": false; }; "ngxRounded": { "alias": "ngxRounded"; "required": false; }; "ngxFillMode": { "alias": "ngxFillMode"; "required": false; }; "label": { "alias": "label"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "autocomplete": { "alias": "autocomplete"; "required": false; }; }, {}, never, ["*"], true, never>;
    static ngAcceptInputType_autocomplete: unknown;
}
