{"version":3,"file":"ngx-eagle-pie-chart.mjs","sources":["../../../projects/ngx-eagle/pie-chart/pie-chart/pie-chart.component.ts","../../../projects/ngx-eagle/pie-chart/pie-chart.module.ts","../../../projects/ngx-eagle/pie-chart/models.ts","../../../projects/ngx-eagle/pie-chart/ngx-eagle-pie-chart.ts"],"sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  numberAttribute,\r\n} from '@angular/core';\r\nimport { PieChart } from '../models';\r\nimport { NgForOf, NgStyle } from '@angular/common';\r\n\r\nexport type NgxPosition = 'bottom' | 'left' | 'right';\r\n\r\n@Component({\r\n  selector: 'ngx-pie-chart',\r\n  template: `\r\n    <canvas #pieChartCanvas [width]=\"width\" [height]=\"height\"></canvas>\r\n    <div>\r\n      <div\r\n        class=\"legend-item\"\r\n        *ngFor=\"let val of value\"\r\n        (mouseenter)=\"mouseenter(val)\"\r\n        (mouseleave)=\"mouseleave()\"\r\n      >\r\n        <div\r\n          class=\"legend-color\"\r\n          [ngStyle]=\"{ 'background-color': val.color }\"\r\n        ></div>\r\n        <p class=\"legend-label\">{{ val.label }}</p>\r\n      </div>\r\n    </div>\r\n  `,\r\n  standalone: true,\r\n  host: {\r\n    class: 'ngx-pie-chart',\r\n    '[class.ngx-pie-chart-position-right]': `ngxPosition === 'right'`,\r\n    '[class.ngx-pie-chart-position-bottom]': `ngxPosition === 'bottom'`,\r\n  },\r\n  imports: [NgForOf, NgStyle],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PieChartComponent implements OnInit {\r\n  @ViewChild('pieChartCanvas', { static: true })\r\n  canvas!: ElementRef<HTMLCanvasElement>;\r\n  context: CanvasRenderingContext2D | null = null;\r\n  @Input() width = 300;\r\n  @Input() height = 300;\r\n  @Input() value: PieChart[] = [];\r\n  @Input() ngxPosition: string = 'right';\r\n  @Input({ transform: numberAttribute }) ngxGutter: number = 0;\r\n\r\n  @Output() partChartIndex = new EventEmitter<number>();\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.context = this.canvas.nativeElement.getContext('2d');\r\n    setTimeout(() => {\r\n      this.drawPieChart(this.value);\r\n\r\n      this.canvas.nativeElement.addEventListener('mousemove', (event) => {\r\n        const rect = this.canvas.nativeElement.getBoundingClientRect();\r\n        const mouseX = event.clientX - rect.left;\r\n        const mouseY = event.clientY - rect.top;\r\n\r\n        // Logic to determine which part of the graph the mouse corresponds to\r\n        const partChartId = this.detectPart(mouseX, mouseY);\r\n        this.partChartIndex.emit(partChartId);\r\n        this.canvas.nativeElement.style.cursor =\r\n          partChartId !== -1 ? 'pointer' : 'default';\r\n        this.drawPieChart(this.value, partChartId);\r\n      });\r\n\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  mouseenter(val: PieChart) {\r\n    const partChartId = this.value.findIndex((v) => v === val);\r\n    this.partChartIndex.emit(partChartId);\r\n    this.drawPieChart(this.value, partChartId);\r\n  }\r\n\r\n  mouseleave() {\r\n    this.partChartIndex.emit(-1);\r\n    this.drawPieChart(this.value, -1);\r\n  }\r\n\r\n  /**\r\n   * Create the graph\r\n   * @param value is of type PieChart[], partGraphId will be the id obtained by hovering the mouse\r\n   * over each part of the graph.\r\n   */\r\n  drawPieChart(value: PieChart[], partGraphId: number = -1) {\r\n    const ctx = this.context;\r\n    if (ctx) {\r\n      const canvasEl: HTMLCanvasElement = this.canvas.nativeElement;\r\n      ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);\r\n      const centerX = canvasEl.width / 2;\r\n      const centerY = canvasEl.height / 2;\r\n      const radius = Math.min(canvasEl.width, canvasEl.height) / 2 - 10;\r\n      const total = this.value.reduce(\r\n        (total, currentValue) => total + currentValue.value,\r\n        0\r\n      );\r\n      let initAngle = 0;\r\n      for (let i = 0; i < value.length; ++i) {\r\n        const percent = value[i].value / total;\r\n        const angle = Math.PI * 2 * percent;\r\n        const _radius =\r\n          partGraphId !== -1 && partGraphId === i ? radius * 1.065 : radius;\r\n        ctx.beginPath();\r\n        ctx.moveTo(centerX, centerY);\r\n        ctx.arc(centerX, centerY, _radius, initAngle, initAngle + angle);\r\n        ctx.closePath();\r\n        ctx.fillStyle = value[i].color;\r\n        this.setShadow(ctx, partGraphId, i);\r\n        ctx.fill();\r\n        initAngle += angle;\r\n      }\r\n      this.drawRing(centerX, centerY, radius);\r\n      this.buildCenteredText(value, total, partGraphId, centerX, centerY);\r\n    } else {\r\n      console.error('Null 2D context.');\r\n    }\r\n  }\r\n\r\n  setShadow(ctx: CanvasRenderingContext2D, partGraphId: number, index: number) {\r\n    if (ctx && partGraphId !== -1 && partGraphId === index) {\r\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n      ctx.shadowBlur = 6;\r\n    } else {\r\n      ctx.shadowBlur = 0;\r\n      ctx.shadowOffsetX = 0;\r\n      ctx.shadowOffsetY = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build the text that will be centered in the graphic\r\n   * @param The value is of type PieChart[], total is the sum of all the values of PieChart[],\r\n   * partGraphId will be the id obtained by hovering the mouse, centerX and centerY is the center of the graph\r\n   */\r\n  buildCenteredText(\r\n    value: PieChart[],\r\n    total: number,\r\n    partGraphId: number = -1,\r\n    centerX: number,\r\n    centerY: number\r\n  ) {\r\n    const ctx = this.context;\r\n    //Check if the graph can have space in the center\r\n    if (ctx && partGraphId !== -1 && this.ngxGutter > 0 && this.ngxGutter < 1) {\r\n      const percent = (value[partGraphId].value / total) * 100;\r\n      const text = value[partGraphId].label + '\\n' + percent.toFixed(2) + '%';\r\n      const font = `14px Arial`;\r\n      ctx.shadowBlur = 0;\r\n      ctx.shadowOffsetX = 0;\r\n      ctx.shadowOffsetY = 0;\r\n      //Add text in the center of the graph\r\n      this.drawCenteredText(\r\n        text,\r\n        centerX,\r\n        centerY,\r\n        font,\r\n        value[partGraphId].color\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a ring in the center of the graph the value depends on ngGutter [0-1]\r\n   * @param Radius of the graph, centerX and centerY is the center of the graph\r\n   */\r\n  drawRing(centerX: number, centerY: number, radius: number) {\r\n    const ctx = this.context;\r\n    if (ctx) {\r\n      ctx.globalCompositeOperation = 'destination-out';\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius * this.ngxGutter, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n      ctx.globalCompositeOperation = 'source-over';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the text and centers it in the empty space in the center of the graphic\r\n   * @param text that will be added in the center of the graph, color is the color of\r\n   * the text that matches the color of the part of the graph that is selected,\r\n   * centerX and centerY is the center of the graph\r\n   */\r\n  drawCenteredText(\r\n    text: string,\r\n    centerX: number,\r\n    centerY: number,\r\n    font: string,\r\n    color = 'black'\r\n  ) {\r\n    const ctx = this.context;\r\n    if (ctx) {\r\n      const allText = text.split('\\n');\r\n      ctx.font = font;\r\n      ctx.fillStyle = color;\r\n      allText.forEach((txt, index) => {\r\n        const textLength = ctx.measureText(txt);\r\n        const textWidth = textLength.width;\r\n        const xPos = centerX - textWidth / 2; //Adjust to center horizontally\r\n        ctx.fillText(txt, xPos, centerY - (txt.length - 1) / 2 + index * 15);\r\n      });\r\n    }\r\n  }\r\n\r\n  //Determines if the mouse pointer is on top of the graph\r\n  detectPart(mouseX: number, mouseY: number): number {\r\n    const canvasEl: HTMLCanvasElement = this.canvas.nativeElement;\r\n    const centroX = canvasEl.width / 2 - 10;\r\n    const centroY = canvasEl.height / 2 - 10;\r\n    const radius = Math.min(canvasEl.width, canvasEl.height) / 2 - 10;\r\n    const total = this.value.reduce(\r\n      (total, currentValue) => total + currentValue.value,\r\n      0\r\n    );\r\n    //calculates the central angle formed with the mouse pointer\r\n    const angleExt = Math.atan2(mouseY - centroY, mouseX - centroX);\r\n    //calculate the distance between the pointer and the center of the circle\r\n    const distance = Math.sqrt(\r\n      (mouseX - centroX) ** 2 + (mouseY - centroY) ** 2\r\n    );\r\n    // Check if the pointer is inside the circle\r\n    if (distance <= radius && this.detectFill(mouseX, mouseY)) {\r\n      let initAngle = 0;\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        const percent = this.value[i].value / total;\r\n        const angle = Math.PI * 2 * percent;\r\n        initAngle += angle;\r\n        // Check if the angle of the pointer is in this portion\r\n        if (this.radianToDegree(initAngle) >= this.radianToDegree(angleExt)) {\r\n          return i; // Returns the part of the graph\r\n        }\r\n      }\r\n    }\r\n    return -1; // If it is not within the graph\r\n  }\r\n\r\n  radianToDegree(rad: number) {\r\n    return rad >= 0 ? rad * (180 / Math.PI) : 360 + rad * (180 / Math.PI);\r\n  }\r\n\r\n  detectFill(mouseX: number, mouseY: number): boolean {\r\n    const ctx = this.context;\r\n    if (ctx) {\r\n      // Get the image data in a small area around the mouse point\r\n      const imageData = ctx.getImageData(mouseX - 1, mouseY - 1, 2, 2); // Small area around the mouse pointer\r\n      // Check if any pixel in the area has a color other than transparent\r\n      for (let i = 0; i < imageData.data.length; i += 4) {\r\n        // Check if channels R, G, B are different from 0 (transparent)\r\n        if (\r\n          imageData.data[i] !== 0 ||\r\n          imageData.data[i + 1] !== 0 ||\r\n          imageData.data[i + 2] !== 0\r\n        ) {\r\n          return true; // Area has colored pixels, it is filled\r\n        }\r\n      }\r\n    }\r\n    return false; // The area is empty or transparent\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PieChartComponent } from './pie-chart/pie-chart.component';\r\n\r\n@NgModule({\r\n  imports: [PieChartComponent],\r\n  exports: [PieChartComponent],\r\n})\r\nexport class PieChartModule {}\r\n","export class PieChart {\r\n  label: string = '';\r\n  value: number = 0;\r\n  color: string = '';\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}