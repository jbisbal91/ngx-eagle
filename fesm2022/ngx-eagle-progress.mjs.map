{"version":3,"file":"ngx-eagle-progress.mjs","sources":["../../../ngx-eagle/progress/progress.component.ts","../../../ngx-eagle/progress/progress.module.ts","../../../ngx-eagle/progress/ngx-eagle-progress.ts"],"sourcesContent":["import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NgxSize, NgxType } from './typings';\r\nimport { NgIf, NgTemplateOutlet } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'ngx-progress',\r\n  template: `\r\n    <ng-container *ngIf=\"ngxType === 'line'\">\r\n      <div\r\n        class=\"ngx-progress-outer\"\r\n        [class.ngx-progress-sm]=\"ngxSize === 'small'\"\r\n        [class.ngx-progress-df]=\"ngxSize === 'default'\"\r\n        [class.ngx-progress-lg]=\"ngxSize === 'large'\"\r\n      >\r\n        <div #line_progress_inner class=\"ngx-progress-inner\"></div>\r\n      </div>\r\n      <span *ngIf=\"ngxPercent !== 100 || !template\">{{ ngxPercent }}%</span>\r\n      <span *ngIf=\"ngxPercent === 100\">\r\n        <ng-template [ngTemplateOutlet]=\"template\"></ng-template>\r\n      </span>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"ngxType === 'circle'\">\r\n      <div class=\"progress-circle\">\r\n        <svg viewBox=\"0 0 100 100\">\r\n          <circle class=\"bg-circle\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n          <circle\r\n            #circle_progress_inner\r\n            class=\"progress-bar\"\r\n            cx=\"50\"\r\n            cy=\"50\"\r\n            r=\"45\"\r\n          ></circle>\r\n        </svg>\r\n        <span *ngIf=\"ngxPercent !== 100 || !template\" class=\"progress-text\"\r\n          >{{ ngxPercent }}%</span\r\n        >\r\n        <div class=\"template-c\" *ngIf=\"ngxPercent === 100\">\r\n          <ng-template [ngTemplateOutlet]=\"template\"></ng-template>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  host: {\r\n    class: 'ngx-progress',\r\n  },\r\n  styles: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true,\r\n  imports: [NgIf, NgTemplateOutlet],\r\n})\r\nexport class ProgressComponent implements AfterViewInit, OnChanges {\r\n  @Input() ngxColor: string = '#1890FF';\r\n  @Input() ngxPercent: number = 0;\r\n  @Input() ngxSize: NgxSize = 'default';\r\n  @Input() ngxTimer: number = 0.5;\r\n  @Input() ngxType: NgxType = 'line';\r\n  @Input() template!: TemplateRef<void>;\r\n\r\n  @ViewChild('line_progress_inner') lineProgressRef!: ElementRef;\r\n  @ViewChild('circle_progress_inner') circleProgressRef!: ElementRef;\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2,\r\n    private elementRef: ElementRef\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.ngxType === 'line') {\r\n      this.updateLineProgress();\r\n    } else {\r\n      this.updateCircleProgress();\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['ngxPercent']) {\r\n      if (this.ngxType === 'line') {\r\n        this.updateLineProgress();\r\n      } else {\r\n        this.updateCircleProgress();\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateLineProgress(): void {\r\n    setTimeout(() => {\r\n      if (this.lineProgressRef) {\r\n        this.renderer.setStyle(\r\n          this.lineProgressRef.nativeElement,\r\n          'width',\r\n          `${this.ngxPercent}%`\r\n        );\r\n\r\n        this.renderer.setStyle(\r\n          this.lineProgressRef.nativeElement,\r\n          'background-color',\r\n          this.ngxColor\r\n        );\r\n        this.renderer.setStyle(\r\n          this.lineProgressRef.nativeElement,\r\n          'transition',\r\n          `width ${this.ngxTimer}s ease-in-out`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateCircleProgress(): void {\r\n    this.renderer.setStyle(this.elementRef.nativeElement, 'width', '100px');\r\n    const progress = Math.min(100, Math.max(0, this.ngxPercent));\r\n    const offset = 283 - (283 * progress) / 100;\r\n    if (this.circleProgressRef) {\r\n      this.renderer.setStyle(\r\n        this.circleProgressRef.nativeElement,\r\n        'stroke-dasharray',\r\n        '283'\r\n      );\r\n      this.renderer.setStyle(\r\n        this.circleProgressRef.nativeElement,\r\n        'stroke-dashoffset',\r\n        '283'\r\n      );\r\n      this.renderer.setStyle(\r\n        this.circleProgressRef.nativeElement,\r\n        'stroke',\r\n        this.ngxColor\r\n      );\r\n      setTimeout(() => {\r\n        this.renderer.setStyle(\r\n          this.circleProgressRef.nativeElement,\r\n          'stroke-dashoffset',\r\n          offset.toString()\r\n        );\r\n\r\n        this.renderer.setStyle(\r\n          this.circleProgressRef.nativeElement,\r\n          'transition',\r\n          `stroke-dashoffset ${this.ngxTimer}s ease-in-out`\r\n        );\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ProgressComponent } from './progress.component';\r\n\r\n@NgModule({\r\n  exports: [ProgressComponent],\r\n  imports: [ProgressComponent],\r\n})\r\nexport class ProgressModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}