{"version":3,"file":"ngx-eagle-expansion-panel.mjs","sources":["../../../ngx-eagle/expansion-panel/expansion-panel/expansion-panel.component.ts","../../../ngx-eagle/expansion-panel/accordion/accordion.component.ts","../../../ngx-eagle/expansion-panel/expansion-panel.module.ts","../../../ngx-eagle/expansion-panel/typings.ts","../../../ngx-eagle/expansion-panel/ngx-eagle-expansion-panel.ts"],"sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  TemplateRef,\r\n  booleanAttribute,\r\n} from '@angular/core';\r\nimport { ExpansionPanel } from '../expansion-panel.interface';\r\nimport { NgClass, NgIf, NgTemplateOutlet } from '@angular/common';\r\nimport { Guid } from 'ngx-eagle/core/services';\r\nimport { NgxExpandIconPosition, NgxType } from '../typings';\r\n\r\n@Component({\r\n  selector: 'ngx-expansion-panel',\r\n  template: `\r\n    <div\r\n      class=\"exp-panel\"\r\n      [class.card-type]=\"ngxType && ngxType === 'card'\"\r\n      [class.bordered-type]=\"ngxType && ngxType === 'bordered'\"\r\n      [class.border-bottom-exp-item]=\"ngxType === 'bordered' && lastExP\"\r\n      [style.backgroundColor]=\"ngxColor\"\r\n    >\r\n      <div\r\n        (click)=\"expand()\"\r\n        class=\"header\"\r\n        [class.border-bottom-header]=\"expanded && ngxType !== 'default'\"\r\n        [class.expand-icon-position]=\"ngxExpandIconPosition === 'left'\"\r\n        [class.disabled]=\"disabled\"\r\n      >\r\n        <span *ngIf=\"typeOf(ngxLabel) === 'string'\">{{ ngxLabel }}</span>\r\n        <ng-template\r\n          *ngIf=\"typeOf(ngxLabel) === 'object'\"\r\n          [ngTemplateOutlet]=\"ngxLabel\"\r\n        ></ng-template>\r\n        <span\r\n          *ngIf=\"!hideToggle\"\r\n          class=\"arrow flex\"\r\n          [ngClass]=\"\r\n            expanded\r\n              ? ngxExpandIconPosition == 'left'\r\n                ? 'rotate-left'\r\n                : 'rotate-right'\r\n              : ngxExpandIconPosition == 'left'\r\n              ? 'no-rotate-left'\r\n              : 'no-rotate-right'\r\n          \"\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            height=\"24\"\r\n            viewBox=\"0 -960 960 960\"\r\n            width=\"24\"\r\n            fill=\"currentColor\"\r\n          >\r\n            <path d=\"M480-344 240-584l56-56 184 184 184-184 56 56-240 240Z\" />\r\n          </svg>\r\n        </span>\r\n      </div>\r\n      <div\r\n        [class.content]=\"ngxType !== 'default'\"\r\n        [class.content-default]=\"ngxType === 'default'\"\r\n        *ngIf=\"expanded\"\r\n      >\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n  standalone: true,\r\n  host: {\r\n    class: 'ngx-expansion-panel',\r\n  },\r\n  imports: [NgClass, NgIf, NgTemplateOutlet],\r\n})\r\nexport class ExpansionPanelComponent implements ExpansionPanel {\r\n  @Output() ngxActiveChange: EventEmitter<ExpansionPanelComponent> =\r\n    new EventEmitter<ExpansionPanelComponent>();\r\n\r\n  public id: string = Guid.create();\r\n\r\n  @Input({ transform: booleanAttribute }) disabled: boolean = false;\r\n  @Input({ transform: booleanAttribute }) expanded: boolean = false;\r\n  @Input({ transform: booleanAttribute }) hideToggle: boolean = false;\r\n  @Input() ngxLabel: any | TemplateRef<void>;\r\n\r\n  ngxColor: string = '';\r\n  ngxType!: NgxType;\r\n  ngxExpandIconPosition!: NgxExpandIconPosition;\r\n\r\n  lastExP: boolean = false;\r\n\r\n  constructor(private elementRef?: ElementRef) {\r\n    this.disabled = this.elementRef?.nativeElement.hasAttribute('disabled');\r\n    this.hideToggle = this.elementRef?.nativeElement.hasAttribute('hideToggle');\r\n  }\r\n\r\n  expand() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    const expansionPanel = new ExpansionPanelComponent();\r\n    expansionPanel.expanded = !this.expanded;\r\n    expansionPanel.ngxLabel = this.ngxLabel;\r\n    expansionPanel.disabled = this.disabled;\r\n    expansionPanel.id = this.id;\r\n    this.ngxActiveChange.emit(expansionPanel);\r\n  }\r\n\r\n  typeOf(value: any) {\r\n    return typeof value;\r\n  }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  QueryList,\r\n  booleanAttribute,\r\n} from '@angular/core';\r\nimport { ExpansionPanelComponent } from '../expansion-panel/expansion-panel.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxExpandIconPosition, NgxType } from '../typings';\r\n\r\n@Component({\r\n  selector: 'ngx-accordion',\r\n  template: `<ng-content></ng-content>`,\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccordionComponent\r\n  implements AfterViewInit, AfterContentInit, OnChanges, OnDestroy\r\n{\r\n  \r\n  @Input({ transform: booleanAttribute }) multi: boolean = false;\r\n  @Input() ngxColor: string = '';  \r\n  @Input() ngxExpandIconPosition: NgxExpandIconPosition = 'left';\r\n  @Input() ngxType: NgxType = 'default';\r\n\r\n  @ContentChildren(ExpansionPanelComponent)\r\n  public expansionPanels!: QueryList<ExpansionPanelComponent>;\r\n\r\n  private subscription: Subscription = new Subscription();\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(): void {\r\n    setTimeout(() => {\r\n      this.setProp();\r\n    });\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.expansionPanels.last.lastExP = true;\r\n    setTimeout(() => {\r\n      this.setProp();\r\n    });\r\n  }\r\n\r\n  setProp() {\r\n    if (this.expansionPanels) {\r\n      this.expansionPanels.forEach((exPanel) => {\r\n        exPanel.ngxColor = this.ngxColor;\r\n        exPanel.ngxType = this.ngxType;\r\n        exPanel.ngxExpandIconPosition = this.ngxExpandIconPosition;\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.expansionPanels.forEach((ep) => {\r\n      this.subscription.add(\r\n        ep.ngxActiveChange.subscribe((value) => {\r\n          this.expand(value);\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  expand(component: any) {\r\n    this.expansionPanels.forEach((ep) => {\r\n      if (ep.id === component.id) {\r\n        ep.expanded = !ep.expanded;\r\n      } else {\r\n        if (!this.multi) {\r\n          ep.expanded = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { ExpansionPanelComponent } from './expansion-panel/expansion-panel.component';\r\nimport { AccordionComponent } from './accordion/accordion.component';\r\n\r\n@NgModule({\r\n  exports: [AccordionComponent, ExpansionPanelComponent],\r\n  imports: [AccordionComponent, ExpansionPanelComponent],\r\n})\r\nexport class ExpansionPanelModule {}\r\n","const AccordionType = ['card', 'bordered', 'default'] as const;\r\nexport type NgxType = (typeof AccordionType)[number];\r\n\r\nconst AccordionExpandIconPosition = ['left', 'right'] as const;\r\nexport type NgxExpandIconPosition =\r\n  (typeof AccordionExpandIconPosition)[number];\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}