{"version":3,"file":"ngx-eagle-divider.mjs","sources":["../../../ngx-eagle/divider/divider.component.ts","../../../ngx-eagle/divider/divider.module.ts","../../../ngx-eagle/divider/typings.ts","../../../ngx-eagle/divider/ngx-eagle-divider.ts"],"sourcesContent":["import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Renderer2,\r\n  booleanAttribute,\r\n} from '@angular/core';\r\nimport { NgIf } from '@angular/common';\r\nimport { NgxOrientation, NgxType } from './typings';\r\n\r\n@Component({\r\n  selector: 'ngx-divider',\r\n  template: `\r\n    <ng-container>\r\n      <span *ngIf=\"ngxText && ngxType === 'horizontal'\">{{ ngxText }}</span>\r\n    </ng-container>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true,\r\n  host: {\r\n    class: 'ngx-divider',\r\n    '[class.ngx-divider-orientation-left]': `ngxOrientation === 'left'`,\r\n    '[class.ngx-divider-orientation-center]': `ngxOrientation === 'center'`,\r\n    '[class.ngx-divider-orientation-right]': `ngxOrientation === 'right'`,\r\n    '[class.ngx-divider-dashed]': 'ngxDashed',\r\n    '[class.ngx-divider-vertical]': `ngxType === 'vertical'`,\r\n  },\r\n  imports: [NgIf],\r\n})\r\nexport class DividerComponent implements AfterViewInit {\r\n  @Input({ transform: booleanAttribute }) ngxDashed: boolean = false;\r\n  @Input() ngxColor: string = '#6b727c';\r\n  @Input() ngxOrientation: NgxOrientation = 'center';\r\n  @Input() ngxText: string = '';\r\n  @Input() ngxType: NgxType = 'horizontal';\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.ngxDashed = elementRef.nativeElement.hasAttribute('ngxDashed');\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.elementRef) {\r\n      this.renderer.setStyle(\r\n        this.elementRef.nativeElement,\r\n        'border-top-color',\r\n        this.ngxColor\r\n      );\r\n      this.renderer.setStyle(\r\n        this.elementRef.nativeElement,\r\n        'color',\r\n        this.ngxColor\r\n      );\r\n    }\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DividerComponent } from './divider.component';\r\n\r\n@NgModule({\r\n  exports: [DividerComponent],\r\n  imports: [DividerComponent],\r\n})\r\nexport class DividerModule {}\r\n","const DividerOrientation = ['left', 'center', 'right'] as const;\r\nexport type NgxOrientation = (typeof DividerOrientation)[number];\r\n\r\nconst DividerType = ['horizontal', 'vertical'] as const;\r\nexport type NgxType = (typeof DividerType)[number];\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}