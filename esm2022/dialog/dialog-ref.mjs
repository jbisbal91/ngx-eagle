import { from, merge, of } from 'rxjs';
import { defaultIfEmpty, filter, first } from 'rxjs/operators';
export class DialogRef {
}
export class InternalDialogRef extends DialogRef {
    constructor(props = {}) {
        super();
        this.beforeCloseGuards = [];
        this.mutate(props);
    }
    close(result) {
        this.canClose(result)
            .pipe(filter(Boolean))
            .subscribe({ next: () => this.onClose(result) });
    }
    beforeClose(guard) {
        this.beforeCloseGuards.push(guard);
    }
    resetDrag(offset) {
        this.onReset(offset);
    }
    canClose(result) {
        const guards$ = this.beforeCloseGuards
            .map((guard) => guard(result))
            .filter((value) => value !== undefined && value !== true)
            .map((value) => {
            return typeof value === 'boolean'
                ? of(value)
                : from(value).pipe(filter((canClose) => !canClose));
        });
        return merge(...guards$).pipe(defaultIfEmpty(true), first());
    }
    mutate(props) {
        Object.assign(this, props);
        this.data = this.config.data;
        this.id = this.config.id;
    }
    updateConfig(config) {
        this.mutate({
            config: {
                ...this.config,
                ...config,
            },
        });
    }
    asDialogRef() {
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25neC1lYWdsZS9kaWFsb2cvZGlhbG9nLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFTL0QsTUFBTSxPQUFnQixTQUFTO0NBaUI5QjtBQU9ELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUFTO0lBTzlDLFlBQVksUUFBZ0MsRUFBRTtRQUM1QyxLQUFLLEVBQUUsQ0FBQztRQUxWLHNCQUFpQixHQUF1QixFQUFFLENBQUM7UUFNekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQWdCO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2FBQ2xCLElBQUksQ0FBQyxNQUFNLENBQVUsT0FBTyxDQUFDLENBQUM7YUFDOUIsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxXQUFXLENBQUMsS0FBdUI7UUFDakMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQW1CO1FBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUFlO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUI7YUFDbkMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDN0IsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7YUFDeEQsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDYixPQUFPLE9BQU8sS0FBSyxLQUFLLFNBQVM7Z0JBQy9CLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUNYLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUwsT0FBTyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUE2QjtRQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFlBQVksQ0FBQyxNQUFrRDtRQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ1YsTUFBTSxFQUFFO2dCQUNOLEdBQUcsSUFBSSxDQUFDLE1BQU07Z0JBQ2QsR0FBRyxNQUFNO2FBQ1Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBmcm9tLCBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVmYXVsdElmRW1wdHksIGZpbHRlciwgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBEaWFsb2dDb25maWcsIEdsb2JhbERpYWxvZ0NvbmZpZywgSnVzdFByb3BzIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IERyYWdPZmZzZXQgfSBmcm9tICcuL2RyYWdnYWJsZS5kaXJlY3RpdmUnO1xyXG5cclxudHlwZSBHdWFyZEZOPFI+ID0gKFxyXG4gIHJlc3VsdD86IFJcclxuKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW47XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGlhbG9nUmVmPFxyXG4gIERhdGEgPSBhbnksXHJcbiAgUmVzdWx0ID0gYW55LFxyXG4gIFJlZiBleHRlbmRzIENvbXBvbmVudFJlZjxhbnk+IHwgVGVtcGxhdGVSZWY8YW55PiA9XHJcbiAgICB8IENvbXBvbmVudFJlZjxhbnk+XHJcbiAgICB8IFRlbXBsYXRlUmVmPGFueT5cclxuPiB7XHJcbiAgcmVmITogUmVmIHwgbnVsbDtcclxuICBkYXRhITogRGF0YTtcclxuICBpZCE6IHN0cmluZztcclxuICBiYWNrZHJvcENsaWNrJCE6IE9ic2VydmFibGU8TW91c2VFdmVudD47XHJcbiAgYWZ0ZXJDbG9zZWQkITogT2JzZXJ2YWJsZTxSZXN1bHQ+O1xyXG5cclxuICBhYnN0cmFjdCBjbG9zZShyZXN1bHQ/OiBSZXN1bHQpOiB2b2lkO1xyXG4gIGFic3RyYWN0IGJlZm9yZUNsb3NlKGd1YXJkOiBHdWFyZEZOPFJlc3VsdD4pOiB2b2lkO1xyXG4gIGFic3RyYWN0IHJlc2V0RHJhZyhvZmZzZXQ/OiBEcmFnT2Zmc2V0KTogdm9pZDtcclxuICBhYnN0cmFjdCB1cGRhdGVDb25maWcoY29uZmlnOiBQYXJ0aWFsPERpYWxvZ0NvbmZpZz4pOiB2b2lkO1xyXG59XHJcblxyXG50eXBlIEludGVybmFsRGlhbG9nUmVmUHJvcHMgPSBQYXJ0aWFsPFxyXG4gIE9taXQ8SnVzdFByb3BzPEludGVybmFsRGlhbG9nUmVmPiwgJ2lkJyB8ICdkYXRhJz4gJlxyXG4gICAgUGljazxJbnRlcm5hbERpYWxvZ1JlZiwgJ29uQ2xvc2UnIHwgJ29uUmVzZXQnPlxyXG4+O1xyXG5cclxuZXhwb3J0IGNsYXNzIEludGVybmFsRGlhbG9nUmVmIGV4dGVuZHMgRGlhbG9nUmVmIHtcclxuICBjb25maWchOiBEaWFsb2dDb25maWcgJiBHbG9iYWxEaWFsb2dDb25maWc7XHJcbiAgb3ZlcnJpZGUgYmFja2Ryb3BDbGljayQhOiBTdWJqZWN0PE1vdXNlRXZlbnQ+O1xyXG4gIGJlZm9yZUNsb3NlR3VhcmRzOiBHdWFyZEZOPHVua25vd24+W10gPSBbXTtcclxuICBvbkNsb3NlITogKHJlc3VsdD86IHVua25vd24pID0+IHZvaWQgfCBudWxsO1xyXG4gIG9uUmVzZXQhOiAob2Zmc2V0PzogRHJhZ09mZnNldCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IEludGVybmFsRGlhbG9nUmVmUHJvcHMgPSB7fSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubXV0YXRlKHByb3BzKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKHJlc3VsdD86IHVua25vd24pOiB2b2lkIHtcclxuICAgIHRoaXMuY2FuQ2xvc2UocmVzdWx0KVxyXG4gICAgICAucGlwZShmaWx0ZXI8Ym9vbGVhbj4oQm9vbGVhbikpXHJcbiAgICAgIC5zdWJzY3JpYmUoeyBuZXh0OiAoKSA9PiB0aGlzLm9uQ2xvc2UocmVzdWx0KSB9KTtcclxuICB9XHJcblxyXG4gIGJlZm9yZUNsb3NlKGd1YXJkOiBHdWFyZEZOPHVua25vd24+KSB7XHJcbiAgICB0aGlzLmJlZm9yZUNsb3NlR3VhcmRzLnB1c2goZ3VhcmQpO1xyXG4gIH1cclxuXHJcbiAgcmVzZXREcmFnKG9mZnNldD86IERyYWdPZmZzZXQpIHtcclxuICAgIHRoaXMub25SZXNldChvZmZzZXQpO1xyXG4gIH1cclxuXHJcbiAgY2FuQ2xvc2UocmVzdWx0OiB1bmtub3duKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBndWFyZHMkID0gdGhpcy5iZWZvcmVDbG9zZUd1YXJkc1xyXG4gICAgICAubWFwKChndWFyZCkgPT4gZ3VhcmQocmVzdWx0KSlcclxuICAgICAgLmZpbHRlcigodmFsdWUpID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IHRydWUpXHJcbiAgICAgIC5tYXAoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXHJcbiAgICAgICAgICA/IG9mKHZhbHVlKVxyXG4gICAgICAgICAgOiBmcm9tKHZhbHVlKS5waXBlKGZpbHRlcigoY2FuQ2xvc2UpID0+ICFjYW5DbG9zZSkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbWVyZ2UoLi4uZ3VhcmRzJCkucGlwZShkZWZhdWx0SWZFbXB0eSh0cnVlKSwgZmlyc3QoKSk7XHJcbiAgfVxyXG5cclxuICBtdXRhdGUocHJvcHM6IEludGVybmFsRGlhbG9nUmVmUHJvcHMpIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5jb25maWcuZGF0YTtcclxuICAgIHRoaXMuaWQgPSB0aGlzLmNvbmZpZy5pZDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNvbmZpZyhjb25maWc6IFBhcnRpYWw8RGlhbG9nQ29uZmlnICYgR2xvYmFsRGlhbG9nQ29uZmlnPikge1xyXG4gICAgdGhpcy5tdXRhdGUoe1xyXG4gICAgICBjb25maWc6IHtcclxuICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAuLi5jb25maWcsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzRGlhbG9nUmVmKCk6IERpYWxvZ1JlZiB7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuIl19