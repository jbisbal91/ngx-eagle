import { ApplicationRef, createComponent, ElementRef, EnvironmentInjector, inject, Injectable, Injector, TemplateRef, } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { DialogRef, InternalDialogRef } from './dialog-ref';
import { DialogComponent } from './dialog.component';
import { DIALOG_DOCUMENT_REF, GLOBAL_DIALOG_CONFIG, NODES_TO_INSERT } from './providers';
import * as i0 from "@angular/core";
const OVERFLOW_HIDDEN_CLASS = 'ngx-dialog-hidden';
export class NgxDialog {
    constructor() {
        this.appRef = inject(ApplicationRef);
        this.injector = inject(EnvironmentInjector);
        this.document = inject(DIALOG_DOCUMENT_REF);
        this.globalConfig = inject(GLOBAL_DIALOG_CONFIG);
        this.dialogs = [];
        this.hasOpenDialogSub = new BehaviorSubject(false);
        this.hasOpenDialogs$ = this.hasOpenDialogSub.asObservable();
    }
    hasOpenDialogs() {
        return this.dialogs.length > 0;
    }
    isOpen(id) {
        return this.dialogs.some((ref) => ref.id === id);
    }
    isLastOpened(idOrRef) {
        const id = idOrRef instanceof DialogRef ? idOrRef.id : idOrRef;
        return this.dialogs.at(-1)?.id === id;
    }
    closeAll() {
        this.dialogs.forEach((dialog) => dialog.close());
    }
    open(componentOrTemplate, config = {}) {
        const mergedConfig = this.mergeConfig(config);
        if (isComponent(componentOrTemplate)) {
            mergedConfig.id ??= componentOrTemplate.name;
        }
        const dialogRef = new InternalDialogRef({
            config: mergedConfig,
            backdropClick$: new Subject(),
        });
        const attachOptions = isTemplate(componentOrTemplate)
            ? this.openTemplate(componentOrTemplate, dialogRef)
            : isComponent(componentOrTemplate)
                ? this.openComponent(componentOrTemplate, dialogRef)
                : throwMustBeAComponentOrATemplateRef(componentOrTemplate);
        if (this.isOpen(dialogRef.id)) {
            attachOptions.view.destroy();
        }
        mergedConfig.onOpen?.();
        this.dialogs.push(dialogRef);
        this.hasOpenDialogSub.next(true);
        if (this.dialogs.length === 1) {
            this.document.body.classList.add(OVERFLOW_HIDDEN_CLASS);
        }
        return this.attach(dialogRef, attachOptions);
    }
    openTemplate(template, dialogRef) {
        const config = dialogRef.config;
        const context = {
            $implicit: dialogRef,
            config,
        };
        const view = config.vcr?.createEmbeddedView(template, context) || template.createEmbeddedView(context);
        return {
            ref: template,
            view,
            attachToApp: !config.vcr,
        };
    }
    openComponent(Component, dialogRef) {
        const componentRef = createComponent(Component, {
            elementInjector: Injector.create({
                providers: [
                    {
                        provide: DialogRef,
                        useValue: dialogRef,
                    },
                ],
                parent: dialogRef.config.vcr?.injector || this.injector,
            }),
            environmentInjector: this.injector,
        });
        return {
            ref: componentRef,
            view: componentRef.hostView,
            attachToApp: true,
        };
    }
    attach(dialogRef, { ref, view, attachToApp }) {
        const dialog = this.createDialog(dialogRef, view);
        const container = getNativeElement(dialogRef.config.container);
        const hooks = {
            after: new Subject(),
        };
        const onClose = (result) => {
            this.globalConfig.onClose?.();
            this.dialogs = this.dialogs.filter(({ id }) => dialogRef.id !== id);
            this.hasOpenDialogSub.next(this.hasOpenDialogs());
            container.removeChild(dialog.location.nativeElement);
            this.appRef.detachView(dialog.hostView);
            this.appRef.detachView(view);
            dialog.destroy();
            view.destroy();
            hooks.after.next(result);
            hooks.after.complete();
            if (!this.hasOpenDialogs()) {
                this.document.body.classList.remove(OVERFLOW_HIDDEN_CLASS);
            }
        };
        const onReset = (offset) => {
            dialog.instance.reset(offset);
        };
        dialogRef.mutate({
            ref,
            onClose,
            afterClosed$: hooks.after.asObservable(),
            onReset,
        });
        container.appendChild(dialog.location.nativeElement);
        this.appRef.attachView(dialog.hostView);
        if (attachToApp) {
            this.appRef.attachView(view);
        }
        return dialogRef.asDialogRef();
    }
    createDialog(dialogRef, view) {
        return createComponent(DialogComponent, {
            elementInjector: Injector.create({
                providers: [
                    {
                        provide: InternalDialogRef,
                        useValue: dialogRef,
                    },
                    {
                        provide: NODES_TO_INSERT,
                        useValue: view.rootNodes,
                    },
                ],
                parent: this.injector,
            }),
            environmentInjector: this.injector,
        });
    }
    mergeConfig(inlineConfig) {
        return {
            ...this.globalConfig,
            ...inlineConfig,
            sizes: this.globalConfig?.sizes,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxDialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxDialog, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxDialog, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
function throwMustBeAComponentOrATemplateRef(value) {
    throw new TypeError(`Dialog must receive a Component or a TemplateRef, but this has been passed instead: ${value}`);
}
function getNativeElement(element) {
    return element instanceof ElementRef ? element.nativeElement : element;
}
function isTemplate(tplOrComp) {
    return tplOrComp instanceof TemplateRef;
}
function isComponent(tplOrComp) {
    return !isTemplate(tplOrComp) && typeof tplOrComp === 'function';
}
//# sourceMappingURL=data:application/json;base64,